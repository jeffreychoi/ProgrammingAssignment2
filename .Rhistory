library(datsets)
library(datasets)
data("iris")
?iris
head(iris)
x<-subset(iris$Sepal.Length, Species=virginica)
x<-subset(iris$Sepal.Length, Species==virginica)
x<-subset(iris, Species==virginica)
iris[[2]]
iris
x<-subset(iris, Species==virginica)
subset(iris, Species==virginica)
subset(iris, Species=="virginica")
subset(iris[[2]], Species=="virginica")
x<-subset(iris, Species=="virginica")
x[[1]]
mean(x[[1]])
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
class(apply(iris[, 1:4], 2, mean))
class(rowMeans(iris[, 1:4]))
data("mtcars")
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
a<-subset(mtcars,cyl==4)
b<-subset(mtcars,cyl==8)
mean(a[[4]])-mean(b[[4]])
a[[4]]
a
mean(a[[4]])
mean(b[[4]])
b
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
vapply(iris[, 1:4], 2, mean)
vapply(iris[, 1:4], mean)
colMeans(iris)
colMeans(iris[[2]])
rowMeans(iris[, 1:4])
head(iris)
mean(iris[1,1:4])
mean(iris[1][1:4])
mean(iris[1])
(5.1+3.5+1.4+0.2)/2
(5.1+3.5+1.4+0.2)/4
?colmeans
?col<eans
?colMeans
apply(iris, 1, mean)
?apply
apply(iris[,1:4], 2, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(
)
makeVector(c(1,0))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1)
makeVector(2)
makeVector(3)
?getmean
makeVector()$getmean
set.seed(1)
?set.seed
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
?rpois
set.seed()
set.seed(NULL)
?pnorm
?dnorm
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol=3)
setwd("C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2")
source(makeCacheMatrix)
ls
inv
makeCacheMatrix(a)
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(a)
x<-makeCacheMatrix(a)
cacheSolve(x)
a
class(a)
cacheSolve(x)
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(a)
cacheSolve(x)
solve(a)
solve(a, ...)
solve(a)
mean()
solve()
a
numeric(a)
as,numeric(a)
as.numeric(a)
a
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(a)
cacheSolve(x)
x<-makeCacheMatrix(a)
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(a)
cacheSolve(x)
solve(makeCacheMatrix(a))
source('C:/Users/Jeffrey/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
